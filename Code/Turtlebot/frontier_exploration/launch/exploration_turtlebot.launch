<launch>

    <!-- Set to your sensor's range -->
    <arg name="sensor_range" default="2.0"/>

    <node pkg="frontier_exploration" type="explore_client" name="explore_client" output="screen"/>

    <node pkg="frontier_exploration" type="explore_server" name="explore_server" output="screen" >

      <param name="frequency" type="double" value="0.1"/>
      <!-- param name="goal_aliasing" type="double" value="$(arg sensor_range)"/ -->
      <param name="goal_aliasing" type="double" value="0.5" />


     #All standard costmap_2d parameters as in move_base, other than BoundedExploreLayer
        <rosparam ns="explore_costmap" subst_value="true">
            footprint: [[0.0,0.18],[-0.18,0.18],[-0.18,-0.18],[0.0,-0.18],[0.17,-0.18],[0.25,0.0],[0.17,0.18]]
            
            transform_tolerance: 1.0
            update_frequency: 3.0
            publish_frequency: 3.0

            #must match incoming static map
            global_frame: /map
            robot_base_frame: /base_footprint
            resolution: 0.03

            rolling_window: false
            track_unknown_space: true

            plugins: 

                - {name: static,           type: "costmap_2d::StaticLayer"}            
                - {name: explore_boundary, type: "frontier_exploration::BoundedExploreLayer"}
                #Can disable sensor layer if gmapping is fast enough to update scans
                - {name: sensor,           type: "costmap_2d::ObstacleLayer"}
                - {name: inflation,        type: "costmap_2d::InflationLayer"}

            static:
                #Can pull data from gmapping, map_server or a non-rolling costmap            
                map_topic: /map
                # map_topic: move_base/global_costmap/costmap   
                subscribe_to_updates: true

            explore_boundary:
                resize_to_boundary: false
                frontier_travel_point: closest
                #set to false for gmapping, true if re-exploring a known area
                explore_clear_space: true

            sensor:
                observation_sources: scan
                scan: {data_type: LaserScan, clearing: true, marking: true, topic: /scan, inf_is_valid: true, raytrace_range: $(arg sensor_range), obstacle_range: $(arg sensor_range)}

            inflation:
                inflation_radius: 0.3
      </rosparam>


        <!--rosparam file="$(find rbx1_nav)/config/turtlebot/costmap_common.yaml" command="load" ns="explore_costmap" />
        
      <rosparam file="$(find rbx1_nav)/config/turtlebot/costmap_exploration.yaml" command="load" ns="explore_costmap" / -->
    </node>

</launch>
